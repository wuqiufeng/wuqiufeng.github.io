<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wuqiufeng Blog</title>
    <description>Every failure is leading towards success.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 16 Jan 2018 15:10:24 +0800</pubDate>
    <lastBuildDate>Tue, 16 Jan 2018 15:10:24 +0800</lastBuildDate>
    <generator>Jekyll v3.7.0</generator>
    
      <item>
        <title>HTTP协议</title>
        <description>&lt;h2 id=&quot;http和https&quot;&gt;HTTP和HTTPS&lt;/h2&gt;

&lt;p&gt;HTTP协议（HyperText Transfer Protocol，超文本传输协议）：是一种发布和接收 HTML页面的方法。&lt;/p&gt;

&lt;p&gt;HTTPS（Hypertext Transfer Protocol over Secure Socket Layer）简单讲是HTTP的安全版，在HTTP下加入SSL层。&lt;/p&gt;

&lt;p&gt;SSL（Secure Sockets Layer 安全套接层）主要用于Web的安全传输协议，在传输层对网络连接进行加密，保障在Internet上数据传输的安全。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP的端口号为80&lt;/li&gt;
  &lt;li&gt;HTTPS的端口号为443&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;url&quot;&gt;URL&lt;/h2&gt;

&lt;p&gt;URL（Uniform / Universal Resource Locator的缩写）：统一资源定位符，是用于完整地描述Internet上网页和其他资源的地址的一种标识方法。&lt;/p&gt;

&lt;p&gt;基本格式：scheme://host[:port#]/path/…/[?query-string][#anchor]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;scheme：协议(例如：http, https, ftp)&lt;/li&gt;
  &lt;li&gt;host：服务器的IP地址或者域名&lt;/li&gt;
  &lt;li&gt;port#：服务器的端口（如果是走协议默认端口，缺省端口80）&lt;/li&gt;
  &lt;li&gt;path：访问资源的路径&lt;/li&gt;
  &lt;li&gt;query-string：参数，发送给http服务器的数据&lt;/li&gt;
  &lt;li&gt;anchor：锚（跳转到网页的指定锚点位置)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;客户端http请求&quot;&gt;客户端HTTP请求&lt;/h2&gt;

&lt;p&gt;URL只是标识资源的位置，而HTTP是用来提交和获取资源。客户端发送一个HTTP请求到服务器的请求消息，包括以下格式：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;请求行、请求头部、空行、请求数据&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/http_request_01.png&quot; alt=&quot;request&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http请求示例&quot;&gt;HTTP请求示例&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET https://www.baidu.com/ HTTP/1.1
Host: www.baidu.com
Connection: keep-alive
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Referer: http://www.baidu.com/
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,en;q=0.6
Cookie: BAIDUID=04E4001F34EA74AD4601512DD3C41A7B:FG=1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;请求方法&quot;&gt;请求方法&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET https://www.baidu.com/ HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;方法&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;请求指定的页面信息，并返回实体主体。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HEAD&lt;/td&gt;
      &lt;td&gt;类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POST&lt;/td&gt;
      &lt;td&gt;向指定资源提交数据进行处理请求（例如提交表单或者上传文件），数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PUT&lt;/td&gt;
      &lt;td&gt;从客户端向服务器传送的数据取代指定的文档的内容。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td&gt;请求服务器删除指定的页面。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CONNECT&lt;/td&gt;
      &lt;td&gt;HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OPTIONS&lt;/td&gt;
      &lt;td&gt;允许客户端查看服务器的性能。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TRACE&lt;/td&gt;
      &lt;td&gt;回显服务器收到的请求，主要用于测试或诊断。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;http请求主要分为get和post两种方法&quot;&gt;HTTP请求主要分为Get和Post两种方法&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;GET是从服务器上获取数据，POST是向服务器传送数据&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GET请求参数显示，都显示在浏览器网址上，HTTP服务器根据该请求所包含URL中的参数来产生响应内容，即“Get”请求的参数是URL的一部分。 例如： http://www.baidu.com/s?wd=Chinese&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;POST请求参数在请求体当中，消息长度没有限制而且以隐式的方式进行发送，通常用来向HTTP服务器提交量比较大的数据（比如请求中包含许多参数或者文件上传操作等），请求的参数包含在“Content-Type”消息头里，指明该消息体的媒体类型和编码&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;常用的请求报头&quot;&gt;常用的请求报头&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Host (主机和端口号)&lt;br /&gt;
Host：对应网址URL中的Web名称和端口号，用于指定被请求资源的Internet主机和端口号，通常属于URL的一部分。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connection (链接类型)&lt;br /&gt;
Connection：表示客户端与服务连接类型
Client 发起一个包含 Connection:keep-alive 的请求，HTTP/1.1使用 keep-alive 为默认值。
Server收到请求后：
如果 Server 支持 keep-alive，回复一个包含 Connection:keep-alive 的响应，不关闭连接；
如果 Server 不支持 keep-alive，回复一个包含 Connection:close 的响应，关闭连接。
如果client收到包含 Connection:keep-alive的响应，向同一个连接发送下一个请求，直到一方主动关闭连接。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Upgrade-Insecure-Requests (升级为HTTPS请求)&lt;br /&gt;
Upgrade-Insecure-Requests：升级不安全的请求，意思是会在加载 http 资源时自动替换成 https 请求，让浏览器不再显示https页面中的http请求警报&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;User-Agent (浏览器名称)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Accept (传输文件类型)&lt;br /&gt;
Accept: &lt;em&gt;/&lt;/em&gt;：表示什么都可以接收。
Accept：image/gif：表明客户端希望接受GIF图像格式的资源；
Accept：text/html：表明客户端希望接受html文本。
Accept: text/html, application/xhtml+xml;q=0.9, image/*;q=0.8：表示浏览器支持的 MIME 类型分别是 html文本、xhtml和xml文档、所有的图像格式资源。
q是权重系数，范围 0 =&amp;lt; q &amp;lt;= 1，q 值越大，请求越倾向于获得其“;”之前的类型表示的内容。若没有指定q值，则默认为1，按从左到右排序顺序；若被赋值为0，则用于表示浏览器不接受此内容类型。
Text：用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的；
Application：用于传输应用程序数据或者二进制数据&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Referer (页面跳转处)&lt;br /&gt;
Referer：表明产生请求的网页来自于哪个URL，用户是从该Referer页面访问到当前请求的页面。这个属性可以用来跟踪Web请求来自哪个页面，是从什么网站来的等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Accept-Encoding（文件编解码格式）&lt;br /&gt;
Accept-Encoding：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到Web响应之后先解码，然后再检查文件格式，许多情形下这可以减少大量的下载时间。
举例：Accept-Encoding:gzip;q=1.0, identity; q=0.5, *;q=0
如果有多个Encoding同时匹配, 按照q值顺序排列，本例中按顺序支持 gzip, identity压缩编码，支持gzip的浏览器会返回经过gzip编码的HTML页面。 如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Accept-Language（语言种类）&lt;br /&gt;
Accept-Langeuage：指出浏览器可以接受的语言种类，如en或en-us指英语，zh或者zh-cn指中文&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Accept-Charset（字符编码）&lt;br /&gt;
Accept-Charset：指出浏览器可以接受的字符编码。
举例：Accept-Charset:iso-8859-1,gb2312,utf-8
ISO8859-1：通常叫做Latin-1。Latin-1包括了书写所有西方欧洲语言不可缺少的附加字符，英文浏览器的默认值是ISO-8859-1.
gb2312：标准简体中文字符集;
utf-8：UNICODE的一种变长字符编码，可以解决多种语言文本显示问题，从而实现应用国际化和本地化。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cookie （Cookie）&lt;br /&gt;
Cookie：浏览器用这个属性向服务器发送Cookie。Cookie是在浏览器中寄存的小型数据体，它可以记载和服务器相关的用户信息，也可以用来实现会话功能&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Content-Type (POST数据类型）&lt;br /&gt;
Content-Type：POST请求里用来表示的内容类型。
举例：Content-Type = Text/XML; charset=gb2312：
指明该请求的消息体中包含的是纯文本的XML类型的数据，字符编码采用“gb2312”。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;服务端http响应&quot;&gt;服务端HTTP响应&lt;/h2&gt;

&lt;p&gt;HTTP响应也由四个部分组成，分别是： 状态行、消息报头、空行、响应正文&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/http_response_02.jpg&quot; alt=&quot;request&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;常用的响应报头&quot;&gt;常用的响应报头&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Cache-Control：must-revalidate, no-cache, private。&lt;br /&gt;
这个值告诉客户端，服务端不希望客户端缓存资源，在下次请求资源时，必须要从新请求服务器，不能从缓存副本中获取资源。
Cache-Control是响应头中很重要的信息，当客户端请求头中包含Cache-Control:max-age=0请求，明确表示不会缓存服务器资源时,Cache-Control作为作为回应信息，通常会返回no-cache，意思就是说，”那就不缓存呗”。
当客户端在请求头中没有包含Cache-Control时，服务端往往会定,不同的资源不同的缓存策略，比如说oschina在缓存图片资源的策略就是Cache-Control：max-age=86400,这个意思是，从当前时间开始，在86400秒的时间内，客户端可以直接从缓存副本中读取资源，而不需要向服务器请求&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connection：keep-alive&lt;br /&gt;
这个字段作为回应客户端的Connection：keep-alive，告诉客户端服务器的tcp连接也是一个长连接，客户端可以继续使用这个tcp连接发送http请求。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Content-Encoding:gzip&lt;br /&gt;
告诉客户端，服务端发送的资源是采用gzip编码的，客户端看到这个信息后，应该采用gzip对资源进行解码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Content-Type：text/html;charset=UTF-8&lt;br /&gt;
告诉客户端，资源文件的类型，还有字符编码，客户端通过utf-8对资源进行解码，然后对资源进行html解析。通常我们会看到有些网站是乱码的，往往就是服务器端没有返回正确的编码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Transfer-Encoding：chunked&lt;br /&gt;
这个响应头告诉客户端，服务器发送的资源的方式是分块发送的。一般分块发送的资源都是服务器动态生成的，在发送时还不知道发送资源的大小，所以采用分块发送，每一块都是独立的，独立的块都能标示自己的长度，最后一块是0长度的，当客户端读到这个0长度的块时，就可以确定资源已经传输完了。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;响应状态码&quot;&gt;响应状态码&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;100~199：表示服务器成功接收部分请求，要求客户端继续提交其余请求才能完成整个处理过程。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;200~299：表示服务器成功接收请求并已完成整个处理过程。常用200（OK 请求成功）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用302（所请求的页面已经临时转移至新的url）、307和304（使用缓存资源）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;400~499：客户端的请求有错误，常用404（服务器无法找到被请求的页面）、403（服务器拒绝访问，权限不够）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;500~599：服务器端出现错误，常用500（请求未完成。服务器遇到不可预知的情况）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 14 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/14/http%E5%8D%8F%E8%AE%AE/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/14/http%E5%8D%8F%E8%AE%AE/</guid>
        
        <category>HTTP</category>
        
        <category>HTTPS</category>
        
        
      </item>
    
      <item>
        <title>正则表达式</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;正则表达式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;正则表达式概述&quot;&gt;正则表达式概述&lt;/h2&gt;

&lt;p&gt;正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE），是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本。&lt;/p&gt;

&lt;p&gt;Regular Expression的“Regular”一般被译为“正则”、“正规”、“常规”。此处的“Regular”即是“规则”、“规律”的意思，Regular Expression即“描述某种规则的表达式”之意。&lt;/p&gt;

&lt;h2 id=&quot;re模块操作&quot;&gt;re模块操作&lt;/h2&gt;
&lt;p&gt;在Python中需要通过正则表达式对字符串进行匹配的时候，可以使用一个模块，名字为re.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;re模块的使用过程&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8

#导入re模块
import re

#使用match方法进行匹配操作
result = re.match(正则表达式,要匹配的字符串)

#如果上一步匹配到数据的话，可以使用group方法来提取数据
result.group()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;re.match是用来进行正则匹配检查的方法，若字符串匹配正则表达式，则match方法返回匹配对象（Match Object），否则返回None（注意不是空字符串”“）。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;匹配对象Macth Object具有group方法，用来返回字符串的匹配部分。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;re.match() 能够匹配出以xxx开头的字符串。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;表示字符&quot;&gt;表示字符&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;正则表达式的单字符匹配&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;功能&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配任意1个字符（除了\n）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[ ]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配[ ]中列举的字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\d&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配数字，即0-9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\D&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配非数字，即不是数字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\s&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配空白，即 空格，tab键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\S&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配非空白&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\w&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配单词字符，即a-z、A-Z、0-9、_&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\W&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配非单词字符&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;示例：[]&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8

import re

# 如果hello的首字符小写，那么正则表达式需要小写的h
ret = re.match(&quot;h&quot;,&quot;hello Python&quot;)
ret.group()


# 如果hello的首字符大写，那么正则表达式需要大写的H
ret = re.match(&quot;H&quot;,&quot;Hello Python&quot;)
ret.group()

# 大小写h都可以的情况
ret = re.match(&quot;[hH]&quot;,&quot;hello Python&quot;)
ret.group()
ret = re.match(&quot;[hH]&quot;,&quot;Hello Python&quot;)
ret.group()

# 匹配0到9第一种写法
ret = re.match(&quot;[0123456789]&quot;,&quot;7Hello Python&quot;)
ret.group()

# 匹配0到9第二种写法
ret = re.match(&quot;[0-9]&quot;,&quot;7Hello Python&quot;)
ret.group()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;原始字符串&quot;&gt;原始字符串&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Python中字符串前面加上 r 表示原生字符串，正则表达式里使用”&quot;作为转义字符&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; mm = &quot;c:\\a\\b\\c&quot;
&amp;gt;&amp;gt;&amp;gt; mm
'c:\\a\\b\\c'
&amp;gt;&amp;gt;&amp;gt; print(mm)
c:\a\b\c
&amp;gt;&amp;gt;&amp;gt; print(mm)
c:\a\b\c
&amp;gt;&amp;gt;&amp;gt; re.match(&quot;c:\\\\&quot;,mm).group()
'c:\\'
&amp;gt;&amp;gt;&amp;gt; ret = re.match(&quot;c:\\\\&quot;,mm).group()
&amp;gt;&amp;gt;&amp;gt; print(ret)
c:\
&amp;gt;&amp;gt;&amp;gt; ret = re.match(&quot;c:\\\\a&quot;,mm).group()
&amp;gt;&amp;gt;&amp;gt; print(ret)
c:\a
&amp;gt;&amp;gt;&amp;gt; ret = re.match(r&quot;c:\\a&quot;,mm).group()
&amp;gt;&amp;gt;&amp;gt; print(ret)
c:\a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;表示数量&quot;&gt;表示数量&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;匹配多个字符的相关格式&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;功能&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;*&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配前一个字符出现0次或者无限次，即可有可无&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配前一个字符出现1次或者无限次，即至少有1次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配前一个字符出现1次或者0次，即要么有1次，要么没有&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;{m}&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配前一个字符出现m次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;{m,}&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配前一个字符至少出现m次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;{m,n}&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配前一个字符出现从m到n次&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;需求：匹配出，一个字符串第一个字母为大小字符，后面都是小写字母并且这些小写字母可有可无&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8
import re

ret = re.match(&quot;[A-Z][a-z]*&quot;,&quot;Mm&quot;)
ret.group()

ret = re.match(&quot;[A-Z][a-z]*&quot;,&quot;Aabcdef&quot;)
ret.group()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例：+&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;需求：匹配出，变量名是否有效&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8
import re

ret = re.match(&quot;[a-zA-Z_]+[\w_]*&quot;,&quot;name1&quot;)
ret.group()

ret = re.match(&quot;[a-zA-Z_]+[\w_]*&quot;,&quot;_name&quot;)
ret.group()

ret = re.match(&quot;[a-zA-Z_]+[\w_]*&quot;,&quot;2_name&quot;)
ret.group()     #error NoneType
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例：?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;需求：匹配出，0到99之间的数字&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8
import re

ret = re.match(&quot;[1-9]?[0-9]&quot;,&quot;7&quot;)
ret.group()

ret = re.match(&quot;[1-9]?[0-9]&quot;,&quot;33&quot;)
ret.group()

ret = re.match(&quot;[1-9]?[0-9]&quot;,&quot;09&quot;)
ret.group()     #输出'0'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例：{m}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;需求：匹配出，8到20位的密码，可以是大小写英文字母、数字、下划线&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8
import re

ret = re.match(&quot;[a-zA-Z0-9_]{6}&quot;,&quot;12a3g45678&quot;)
ret.group()     #输出'12a3g4'

ret = re.match(&quot;[a-zA-Z0-9_]{8,20}&quot;,&quot;1ad12f23s34455ff66&quot;)
ret.group()     #输出'1ad12f23s34455ff66'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;表示边界&quot;&gt;表示边界&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;功能&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配字符串开头&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配字符串结尾&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\b&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配一个单词的边界&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\B&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配非单词边界&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;示例：$&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#coding=utf-8&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 正确的地址&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;w]{4,20}@163&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;xiaoWang@163.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 不正确的地址&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;w]{4,20}@163&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;xiaoWang@163.comheihei&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 通过$来确定末尾&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;w]{4,20}@163&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.com$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;xiaoWang@163.comheihei&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例: \b&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; re.match(r&quot;.*\bver\b&quot;, &quot;ho ver abc&quot;).group()
'ho ver'

&amp;gt;&amp;gt;&amp;gt; re.match(r&quot;.*\bver\b&quot;, &quot;ho verabc&quot;).group()
Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
AttributeError: 'NoneType' object has no attribute 'group'

&amp;gt;&amp;gt;&amp;gt; re.match(r&quot;.*\bver\b&quot;, &quot;hover abc&quot;).group()
Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
AttributeError: 'NoneType' object has no attribute 'group'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例：\B&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&quot;.*\Bver\B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hoverabc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'hover'&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&quot;.*\Bver\B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ho verabc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'NoneType'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'group'&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&quot;.*\Bver\B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hover abc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'NoneType'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'group'&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&quot;.*\Bver\B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ho ver abc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'NoneType'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'group'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;匹配分组&quot;&gt;匹配分组&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;功能&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;|&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;匹配左右任意一个表达式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;(ab)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;将括号中字符作为一个分组&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\num&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;引用分组num匹配到的字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;(?P&lt;name&gt;)&lt;/name&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;分组起别名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;(?P=name)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;引用别名为name分组匹配到的字符串&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;示例：|&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;需求：匹配出0-100之间的数字&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8

import re

ret = re.match(&quot;[1-9]?\d&quot;,&quot;8&quot;)
ret.group()

ret = re.match(&quot;[1-9]?\d&quot;,&quot;78&quot;)
ret.group()

# 不正确的情况
ret = re.match(&quot;[1-9]?\d&quot;,&quot;08&quot;)
ret.group()

# 修正之后的
ret = re.match(&quot;[1-9]?\d$&quot;,&quot;08&quot;)
ret.group()

# 添加|
ret = re.match(&quot;[1-9]?\d$|100&quot;,&quot;8&quot;)
ret.group()

ret = re.match(&quot;[1-9]?\d$|100&quot;,&quot;78&quot;)
ret.group()

ret = re.match(&quot;[1-9]?\d$|100&quot;,&quot;08&quot;)
ret.group()     #error NonoType

ret = re.match(&quot;[1-9]?\d$|100&quot;,&quot;100&quot;)
ret.group()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例：( )&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;需求：匹配出163、126、qq邮箱之间的数字&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8

import re

ret = re.match(&quot;\w{4,20}@163\.com&quot;, &quot;test@163.com&quot;)
ret.group()

ret = re.match(&quot;\w{4,20}@(163|126|qq)\.com&quot;, &quot;test@126.com&quot;)
ret.group()

ret = re.match(&quot;\w{4,20}@(163|126|qq)\.com&quot;, &quot;test@qq.com&quot;)
ret.group()

ret = re.match(&quot;\w{4,20}@(163|126|qq)\.com&quot;, &quot;test@gmail.com&quot;)
ret.group()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; ret = re.match(&quot;([^-]*)-(\d+)&quot;,&quot;010-12345678&quot;)
&amp;gt;&amp;gt;&amp;gt; ret.group()
'010-12345678'
&amp;gt;&amp;gt;&amp;gt; ret.group(1)
'010'
&amp;gt;&amp;gt;&amp;gt; ret.group(2)
'12345678'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例：\&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;需求：匹配出&amp;lt;html&amp;gt;hh&amp;lt;/html&amp;gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8

import re

# 能够完成对正确的字符串的匹配
ret = re.match(&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a-zA-Z&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]*&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\w*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;a-zA-Z&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]*&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;hh&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&quot;)
ret.group()

# 如果遇到非正常的html格式字符串，匹配出错
ret = re.match(&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a-zA-Z&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]*&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\w*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;a-zA-Z&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]*&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;hh&lt;span class=&quot;nt&quot;&gt;&amp;lt;/htmlbalabala&amp;gt;&lt;/span&gt;&quot;)
ret.group()

# 正确的理解思路：如果在第一对&lt;span class=&quot;nt&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;中是什么，按理说在后面的那对&lt;span class=&quot;nt&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;中就应该是什么

# 通过引用分组中匹配到的数据即可，但是要注意是元字符串，即类似 r&quot;&quot;这种格式
ret = re.match(r&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a-zA-Z&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]*)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\w*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1&amp;gt;&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;hh&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&quot;)
ret.group()

# 因为2对&lt;span class=&quot;nt&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;中的数据不一致，所以没有匹配出来
ret = re.match(r&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a-zA-Z&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]*)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\w*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1&amp;gt;&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;hh&lt;span class=&quot;nt&quot;&gt;&amp;lt;/htmlbalabala&amp;gt;&lt;/span&gt;&quot;)
ret.group()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例：\number&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;需求：匹配出&amp;lt;html&amp;gt;&amp;lt;h1&amp;gt;www.mi1024.top&amp;lt;/h1&amp;gt;&amp;lt;/html&amp;gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8

import re

ret = re.match(r&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;.*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;2&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1&amp;gt;&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;h1&amp;gt;&lt;/span&gt;www.mi1024.top&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&quot;)
ret.group()

ret = re.match(r&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;.*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;2&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1&amp;gt;&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;h1&amp;gt;&lt;/span&gt;www.mi1024.top&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&quot;)
ret.group() #error NoneType
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;**示例：(?P&lt;name&gt;) (?P=name)**&lt;/name&gt;&lt;/p&gt;

&lt;p&gt;需求：匹配出&amp;lt;html&amp;gt;&amp;lt;h1&amp;gt;www.mi1024.top&amp;lt;/h1&amp;gt;&amp;lt;/html&amp;gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8

import re

ret = re.match(r&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(?&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name1&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\w*)&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(?&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name2&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\w*)&amp;gt;.*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(?&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=name2)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(?&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=name1)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;h1&amp;gt;&lt;/span&gt;www.mi1024.top&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&quot;)
ret.group()

ret = re.match(r&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(?&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name1&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\w*)&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(?&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name2&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\w*)&amp;gt;.*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(?&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=name2)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(?&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=name1)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;h1&amp;gt;&lt;/span&gt;www.mi1024.top&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&quot;)
ret.group()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;re模块的高级用法&quot;&gt;re模块的高级用法&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;search&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;需求：匹配出文章阅读的次数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8
import re

ret = re.search(r&quot;\d+&quot;, &quot;阅读次数为 9999&quot;)
ret.group() #输出'9999''
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;findall&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;需求：统计出python、c、c++相应文章阅读的次数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8
import re

ret = re.findall(r&quot;\d+&quot;, &quot;python = 9999, c = 7890, c++ = 12345&quot;)
print ret   #输出['9999', '7890', '12345']
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;sub 将匹配到的数据进行替换&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;需求：将匹配到的阅读次数加1&lt;/p&gt;

&lt;p&gt;方法1：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8
import re

ret = re.sub(r&quot;\d+&quot;, '998', &quot;python = 997&quot;)
print ret
#python = 998
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;方法2：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8
import re

def add(temp):
    strNum = temp.group()
    num = int(strNum) + 1
    return str(num)

ret = re.sub(r&quot;\d+&quot;, add, &quot;python = 997&quot;)
print ret   #python = 998

ret = re.sub(r&quot;\d+&quot;, add, &quot;python = 99&quot;)
print ret   #python = 100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;split 根据匹配进行切割字符串，并返回一个列表&lt;/p&gt;

&lt;p&gt;需求：切割字符串“info:xiaoZhang 33 shandong”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding=utf-8
import re

ret = re.split(r&quot;:| &quot;,&quot;info:xiaoZhang 33 shandong&quot;)
print ret   #['info', 'xiaoZhang', '33', 'shandong']
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;python贪婪和非贪婪&quot;&gt;python贪婪和非贪婪&lt;/h2&gt;

&lt;p&gt;Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；&lt;/p&gt;

&lt;p&gt;非贪婪则相反，总是尝试匹配尽可能少的字符。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在”*”,”?”,”+”,”{m,n}”后面加上?，使贪婪变成非贪婪。&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; s=&quot;This is a number 234-235-22-423&quot;
&amp;gt;&amp;gt;&amp;gt; r=re.match(&quot;.+(\d+-\d+-\d+-\d+)&quot;,s)
&amp;gt;&amp;gt;&amp;gt; r.group(1)
'4-235-22-423'
&amp;gt;&amp;gt;&amp;gt; r=re.match(&quot;.+?(\d+-\d+-\d+-\d+)&quot;,s)
&amp;gt;&amp;gt;&amp;gt; r.group(1)
'234-235-22-423'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正则表达式模式中使用到通配字，那它在从左到右的顺序求值时，会尽量“抓取”满足匹配最长字符串，在我们上面的例子里面，“.+”会从字符串的启始处抓取满足模式的最长字符，其中包括我们想得到的第一个整型字段的中的大部分，“\d+”只需一位字符就可以匹配，所以它匹配了数字“4”，而“.+”则匹配了从字符串起始到这个第一位数字4之前的所有字符。&lt;/p&gt;

&lt;p&gt;解决方式：非贪婪操作符“？”，这个操作符可以用在”*”,”+”,”?”的后面，要求正则匹配的越少越好。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; re.match(r&quot;aa(\d+)&quot;,&quot;aa2343ddd&quot;).group(1)
'2343'
&amp;gt;&amp;gt;&amp;gt; re.match(r&quot;aa(\d+?)&quot;,&quot;aa2343ddd&quot;).group(1)
'2'
&amp;gt;&amp;gt;&amp;gt; re.match(r&quot;aa(\d+)ddd&quot;,&quot;aa2343ddd&quot;).group(1) 
'2343'
&amp;gt;&amp;gt;&amp;gt; re.match(r&quot;aa(\d+?)ddd&quot;,&quot;aa2343ddd&quot;).group(1)
'2343'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 08 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
        
        <category>re</category>
        
        
      </item>
    
      <item>
        <title>为博客添加 Gitalk 评论插件</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;由于 &lt;strong&gt;Disqus&lt;/strong&gt; 对于国内网路的支持十分糟糕，很多人反映 Disqus 评论插件一直加载不出来。而我一直是处于翻墙状态的~（话说你们做程序员的都不翻墙用Google的吗😅，哈哈，吐嘈下）&lt;/p&gt;

&lt;p&gt;针对这个问题，我添加了&lt;a href=&quot;https://github.com/gitalk/gitalk&quot;&gt;Gitalk&lt;/a&gt; 评论插件。在此，非常感谢 &lt;a href=&quot;https://github.com/FeDemo&quot;&gt;@FeDemo&lt;/a&gt; 的推荐 。&lt;/p&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;

&lt;h3 id=&quot;gitalk-评论插件&quot;&gt;Gitalk 评论插件&lt;/h3&gt;

&lt;p&gt;首先来看看 Gitalk 的界面和功能：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gitalk.github.io/&quot;&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1fmm4u3j0lmj30nk0kl40i.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;gitalk 使用 Github 帐号登录，界面干净整洁，最喜欢的一点是支持 &lt;code class=&quot;highlighter-rouge&quot;&gt;MarkDown语法&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;原理&quot;&gt;原理&lt;/h3&gt;

&lt;p&gt;Gitalk 是一个利用 Github API,基于 Github issue 和 Preact 开发的评论插件，在 Gitalk 之前还有一个 &lt;a href=&quot;https://github.com/imsun/gitment&quot;&gt;gitment&lt;/a&gt; 插件也是基于这个原理开发的,不过 gitment 已经很久没人维护了。&lt;/p&gt;

&lt;p&gt;可以看到在 gitalk 的评论框进行评论时，其实就是在对应的 issue 上提问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1fmm5916av1j30i209rab7.jpg&quot; alt=&quot;gitalk评论框&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1fmm596ggkfj30mx0gfjuk.jpg&quot; alt=&quot;Github issue&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;集成-gitalk&quot;&gt;集成 Gitalk&lt;/h3&gt;

&lt;p&gt;到这里，你应该对 Gitalk 有个大致的了解了，现在，开始集成 gitalk 插件吧。&lt;/p&gt;

&lt;p&gt;将这段代码插入到你的网站：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Gitalk&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;评论&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Gitalk&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们需要关心的就是配置下面几个参数：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;clientID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Github Application clientID`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;clientSecret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Github Application clientSecret`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Github 仓库名`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//存储你评论 issue 的 Github 仓库名（建议直接用 GitHub Page 的仓库名）&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Github 用户名'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Github 用户名'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//这个仓库的管理员，可以有多个，用数组表示，一般写自己,&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'window.location.pathname'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//页面的唯一标识，gitalk 会根据这个标识自动创建的issue的标签,我们使用页面的相对路径作为标识&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;当然，还有其他很多参数，有兴趣的话可以 &lt;a href=&quot;https://github.com/gitalk/gitalk#options&quot;&gt; 点这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;比如我就增加了这个全屏遮罩的参数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;distractionFreeMode: true,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;创建-github-application&quot;&gt;创建 Github Application&lt;/h3&gt;

&lt;p&gt;Gitalk 需要一个 &lt;strong&gt;Github Application&lt;/strong&gt;，&lt;a href=&quot;https://github.com/settings/applications/new&quot;&gt;点击这里申请&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;填写下面参数：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1fmm7jaib6fj30jo0gaacs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击创建&lt;/p&gt;

&lt;p&gt;获取 &lt;code class=&quot;highlighter-rouge&quot;&gt;Client ID&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Client Secret&lt;/code&gt; 填入你的我们 Gitalk 参数中&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1fmm7jrzff6j30lc0budhp.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当你参数都设置好，将代码推送到 Github 仓库后，没什么问题的话，当你点击进入你的博客页面后就会出现评论框了。&lt;/p&gt;

&lt;p&gt;当你用 github 帐号登录（管理员），并且第一次加载该会比较慢，因为第一次加载会自动在你 &lt;code class=&quot;highlighter-rouge&quot;&gt;repo&lt;/code&gt; 的仓库下创建对应 issue。&lt;/p&gt;

&lt;p&gt;比如说这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1fmm867n88cj30l809mjse.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1fmm8a0i0jkj30rr0ct42t.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，你也可以手动创建issue作为 gitalk评论容器。只要有 &lt;code class=&quot;highlighter-rouge&quot;&gt;Gitalk&lt;/code&gt; 标签 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; 对应标签就可以。比我我自己创建的 &lt;a href=&quot;https://github.com/qiubaiying/qiubaiying.github.io/issues/38&quot;&gt;About issue&lt;/a&gt; 。&lt;/p&gt;

&lt;h1 id=&quot;结语&quot;&gt;结语&lt;/h1&gt;

&lt;p&gt;最后说几句吐嘈几句， Gitalk 需要你点开每篇文章的页面才会创建对应的 issue,对我来说真是个糟糕的体验（文章有点多~）。&lt;/p&gt;

&lt;p&gt;当然，也有解决办法，这篇 &lt;a href=&quot;https://draveness.me/git-comments-initialize&quot;&gt;自动初始化 Gitalk 和 Gitment 评论&lt;/a&gt;，就解决了这个问题。&lt;/p&gt;

&lt;p&gt;最后，&lt;a href=&quot;https://github.com/qiubaiying/qiubaiying.github.io&quot;&gt;给个 star 吧&lt;/a&gt;~&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/12/19/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0-Gitalk-%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/19/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0-Gitalk-%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</guid>
        
        <category>Blog</category>
        
        
      </item>
    
      <item>
        <title>Xcode 控制台输出中文</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;重写 NSArray、NSSet、NSDictionary 的输出方法，在Xcode实现中文（Unicode）字符在控制台的输出&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;Xcode 控制台中在输出 NSArray、NSSet、NSDictionary 时，其中的中文字符会变成Unicode编码 如&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;\U67cf\U8367&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;我们通过分类重写这些类的输出方法即可实现在控制台输出中文：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; - (NSString *)descriptionWithLocale:(id)locale indent:(NSUInteger)level
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;效果&quot;&gt;效果&lt;/h2&gt;
&lt;p&gt;先看看效果：&lt;/p&gt;

&lt;p&gt;创建一个字典并输出:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSData *strData = [@&quot;str -&amp;gt; data格式的字符串&quot; dataUsingEncoding:NSUTF8StringEncoding];

NSData *dicData = [NSJSONSerialization dataWithJSONObject:@{@&quot;key0&quot;: @&quot;字典 -&amp;gt; data 的数据&quot;,}
                                                      options:NSJSONWritingPrettyPrinted
                                                        error:nil];

NSMutableSet *set = [NSMutableSet setWithArray:@[@&quot;set0&quot;,
                                                 strData,
                                                 dicData]];
NSDictionary *dic = @{@&quot;name&quot;  : @&quot;BY&quot;,
                       @&quot;My bolg&quot; : @&quot;http://qiubaiying.top&quot;,
                       @&quot;count&quot; : @(11),
                       @&quot;strData&quot; : strData,
                       @&quot;dicData&quot; : dicData,
                       @&quot;set&quot;     : set,
                       @&quot;Unicode&quot; : @&quot;😀😁🤣😂😄&quot;,
                       @&quot;contact&quot; : @[@&quot;BY Blog:http://qiubaiying.top&quot;,
                                      @&quot;GitHub:https://github.com/qiubaiying&quot;,
                                      @&quot;简书:https://http://www.jianshu.com/u/e71990ada2fd&quot;]};
NSLog(@&quot;%@&quot;, dic);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出结果：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2017-03-01 10:36:45.709 BYFoundationLog_Demo[1657:53604] {
    &quot;My bolg&quot; = &quot;http://qiubaiying.top&quot;;
    Unicode = &quot;\Ud83d\Ude00\Ud83d\Ude01\Ud83e\Udd23\Ud83d\Ude02\Ud83d\Ude04&quot;;
    contact =     (
        &quot;BY Blog:http://qiubaiying.top&quot;,
        &quot;GitHub:https://github.com/qiubaiying&quot;,
        &quot;\U7b80\U4e66:https://http://www.jianshu.com/u/e71990ada2fd&quot;
    );
    count = 11;
    dicData = &amp;lt;7b0a2020 226b6579 3022203a 2022e5ad 97e585b8 202d3e20 64617461 20e79a84 e695b0e6 8dae220a 7d&amp;gt;;
    name = BY;
    set = &quot;{(\n    &amp;lt;73747220 2d3e2064 617461e6 a0bce5bc 8fe79a84 e5ad97e7 aca6e4b8 b2&amp;gt;,\n    set0,\n    &amp;lt;7b0a2020 226b6579 3022203a 2022e5ad 97e585b8 202d3e20 64617461 20e79a84 e695b0e6 8dae220a 7d&amp;gt;\n)}&quot;;
    strData = &amp;lt;73747220 2d3e2064 617461e6 a0bce5bc 8fe79a84 e5ad97e7 aca6e4b8 b2&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;BYFoundationLog.m&lt;/code&gt;拖入项目，再次运行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2017-03-01 10:35:52.545 BYFoundationLog_Demo[1635:52772] 	{
	set = 	{(
		&quot;str -&amp;gt; data格式的字符串&quot;,
		&quot;set0&quot;,
			{
			key0 = &quot;字典 -&amp;gt; data 的数据&quot;,
		},
	)},
	Unicode = &quot;😀😁🤣😂😄&quot;,
	strData = &quot;str -&amp;gt; data格式的字符串&quot;,
	count = 11,
	dicData = 	{
		key0 = &quot;字典 -&amp;gt; data 的数据&quot;,
	},
	contact = 	(
		&quot;BY Blog:http://qiubaiying.top&quot;,
		&quot;GitHub:https://github.com/qiubaiying&quot;,
		&quot;简书:https://http://www.jianshu.com/u/e71990ada2fd&quot;,
	),
	name = &quot;BY&quot;,
	My bolg = &quot;http://qiubaiying.top&quot;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;实现方法&quot;&gt;实现方法&lt;/h2&gt;

&lt;p&gt;以 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSArray&lt;/code&gt; 为例：&lt;/p&gt;

&lt;p&gt;创建一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSArray&lt;/code&gt; 的分类，重写输出方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@implementation NSArray (Log)

- (NSString *)descriptionWithLocale:(id)locale indent:(NSUInteger)level {
    NSMutableString *desc = [NSMutableString string];
    
    NSMutableString *tabString = [[NSMutableString alloc] initWithCapacity:level];
    for (NSUInteger i = 0; i &amp;lt; level; ++i) {
        [tabString appendString:@&quot;\t&quot;];
    }
    
    NSString *tab = @&quot;&quot;;
    if (level &amp;gt; 0) {
        tab = tabString;
    }
    [desc appendString:@&quot;\t(\n&quot;];
    
    for (id obj in self) {
        if ([obj isKindOfClass:[NSDictionary class]]
            || [obj isKindOfClass:[NSArray class]]
            || [obj isKindOfClass:[NSSet class]]) {
            NSString *str = [((NSDictionary *)obj) descriptionWithLocale:locale indent:level + 1];
            [desc appendFormat:@&quot;%@\t%@,\n&quot;, tab, str];
        } else if ([obj isKindOfClass:[NSString class]]) {
            [desc appendFormat:@&quot;%@\t\&quot;%@\&quot;,\n&quot;, tab, obj];
        } else if ([obj isKindOfClass:[NSData class]]) {
            
            NSError *error = nil;
            NSObject *result =  [NSJSONSerialization JSONObjectWithData:obj
                                                                options:NSJSONReadingMutableContainers
                                                                  error:&amp;amp;error];
            
            if (error == nil &amp;amp;&amp;amp; result != nil) {
                if ([result isKindOfClass:[NSDictionary class]]
                    || [result isKindOfClass:[NSArray class]]
                    || [result isKindOfClass:[NSSet class]]) {
                    NSString *str = [((NSDictionary *)result) descriptionWithLocale:locale indent:level + 1];
                    [desc appendFormat:@&quot;%@\t%@,\n&quot;, tab, str];
                } else if ([obj isKindOfClass:[NSString class]]) {
                    [desc appendFormat:@&quot;%@\t\&quot;%@\&quot;,\n&quot;, tab, result];
                }
            } else {
                @try {
                    NSString *str = [[NSString alloc] initWithData:obj encoding:NSUTF8StringEncoding];
                    if (str != nil) {
                        [desc appendFormat:@&quot;%@\t\&quot;%@\&quot;,\n&quot;, tab, str];
                    } else {
                        [desc appendFormat:@&quot;%@\t%@,\n&quot;, tab, obj];
                    }
                }
                @catch (NSException *exception) {
                    [desc appendFormat:@&quot;%@\t%@,\n&quot;, tab, obj];
                }
            }
        } else {
            [desc appendFormat:@&quot;%@\t%@,\n&quot;, tab, obj];
        }
    }
    
    [desc appendFormat:@&quot;%@)&quot;, tab];
    
    return desc;
}

@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NSSet、NSDictionary 与 NSArray 实现方法类似&lt;/p&gt;

&lt;h2 id=&quot;代码下载&quot;&gt;代码下载&lt;/h2&gt;

&lt;p&gt;代码及Demo地址：&lt;a href=&quot;https://github.com/qiubaiying/BYFoundationLog&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;使用方法&quot;&gt;使用方法&lt;/h2&gt;

&lt;p&gt;直接将 &lt;code class=&quot;highlighter-rouge&quot;&gt;BYFoundationLog.m&lt;/code&gt; 文件拖入项目中就能使用&lt;/p&gt;

</description>
        <pubDate>Wed, 01 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/01/Xcode-%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E4%B8%AD%E6%96%87/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/01/Xcode-%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E4%B8%AD%E6%96%87/</guid>
        
        <category>iOS</category>
        
        <category>Xcode</category>
        
        <category>macOS</category>
        
        
      </item>
    
      <item>
        <title>使用 .gitignore 忽略 Git 仓库中的文件</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 文件忽略指定文件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;gitignore&quot;&gt;.gitignore&lt;/h2&gt;

&lt;p&gt;在Git中，很多时候你只想将代码提交到仓库，而不是将当前文件目录下的文件全部提交到Git仓库中，例如在MacOS系统下面的&lt;code class=&quot;highlighter-rouge&quot;&gt;.DS_Store&lt;/code&gt;文件，或者是Xocde的操作记录，又或者是pod库的中一大串的源代码。这种情况下使用&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;就能够在Git提交时自动忽略掉这些文件。&lt;/p&gt;

&lt;h2 id=&quot;忽略的格式&quot;&gt;忽略的格式&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; :此为注释 – 将被 Git 忽略&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*.a&lt;/code&gt; :忽略所有 &lt;code class=&quot;highlighter-rouge&quot;&gt;.a&lt;/code&gt; 结尾的文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!lib.a&lt;/code&gt; : 不忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;lib.a&lt;/code&gt; 文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/TODO&lt;/code&gt; :仅仅忽略项目根目录下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;TODO&lt;/code&gt; 文件,不包括 &lt;code class=&quot;highlighter-rouge&quot;&gt;subdir/TODO&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build/&lt;/code&gt; : 忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;build/&lt;/code&gt; 目录下的所有文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doc/*.txt&lt;/code&gt; : 会忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;doc/notes.txt&lt;/code&gt; 但不包括 &lt;code class=&quot;highlighter-rouge&quot;&gt;doc/server/arch.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;创建方法&quot;&gt;创建方法&lt;/h2&gt;

&lt;h4 id=&quot;从-github-上获取&quot;&gt;从 &lt;a href=&quot;https://github.com/github/gitignore.git&quot;&gt;github&lt;/a&gt; 上获取&lt;/h4&gt;

&lt;p&gt;github上整理了一些常用需要的项目中需要忽略的文件配置，根据需要进行获取&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/github/gitignore.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;与 Xcode 相关的三个文件&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Xcode.gitignore&lt;/li&gt;
  &lt;li&gt;Objective-C.gitignore&lt;/li&gt;
  &lt;li&gt;Swift.gitignore&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode.gitignore&lt;/code&gt;忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode&lt;/code&gt; 配置信息，如操作记录，默认打开窗口等&lt;/p&gt;

&lt;p&gt;其他两个在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode.gitignore&lt;/code&gt; 基础上针对不同的语言进行忽略&lt;/p&gt;

&lt;p&gt;将这些文件重写命名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gittignore&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mv Swift.gitignore .gittignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;通过-gitignoreio-创建推荐&quot;&gt;通过 &lt;a href=&quot;https://www.gitignore.io/&quot;&gt;gitignore.io&lt;/a&gt; 创建（推荐）&lt;/h4&gt;

&lt;h6 id=&quot;先自定义终端命令&quot;&gt;先自定义终端命令：&lt;/h6&gt;

&lt;p&gt;macOS下默认是&lt;code class=&quot;highlighter-rouge&quot;&gt;\#!/bin/bash&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;function gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}&quot; &amp;gt;&amp;gt; ~/.bash_profile &amp;amp;&amp;amp; source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/zsh&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;function gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}&quot; &amp;gt;&amp;gt; ~/.zshrc &amp;amp;&amp;amp; source ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;使用&quot;&gt;使用&lt;/h6&gt;

&lt;p&gt;在当前终端目录下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gi swift &amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;就会针对 Swifit 类型的工程创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 文件。&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/22/%E4%BD%BF%E7%94%A8-.gitignore-%E5%BF%BD%E7%95%A5-git-%E4%BB%93%E5%BA%93%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/22/%E4%BD%BF%E7%94%A8-.gitignore-%E5%BF%BD%E7%95%A5-git-%E4%BB%93%E5%BA%93%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6/</guid>
        
        <category>Mac</category>
        
        <category>终端</category>
        
        <category>Git</category>
        
        <category>Github</category>
        
        
      </item>
    
      <item>
        <title>Mac 文件的隐藏与显示</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;让 Finder 显示隐藏文件和文件夹&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;基本&quot;&gt;基本&lt;/h1&gt;

&lt;h4 id=&quot;显示&quot;&gt;显示&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;隐藏&quot;&gt;隐藏&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;进阶&quot;&gt;进阶&lt;/h1&gt;

&lt;p&gt;创建终端快捷命令&lt;/p&gt;

&lt;p&gt;在 &lt;strong&gt;zsh&lt;/strong&gt; shell 下，创建快捷命令&lt;/p&gt;

&lt;h4 id=&quot;创建显示命令-fd-filedisplay&quot;&gt;创建显示命令 fd （fileDisplay）&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;alias fd='defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder'&quot;&amp;gt;&amp;gt; ~/.zshrc &amp;amp;&amp;amp; source ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;创建隐藏命令-fhfilehide&quot;&gt;创建隐藏命令 fh（fileHide）&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;alias fd='defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder'&quot;&amp;gt;&amp;gt; ~/.zshrc &amp;amp;&amp;amp; source ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用方法&lt;/p&gt;

&lt;p&gt;显示隐藏文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ fd 隐藏文件

$ fh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 22 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/22/Mac-%E6%96%87%E4%BB%B6%E7%9A%84%E9%9A%90%E8%97%8F%E4%B8%8E%E6%98%BE%E7%A4%BA/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/22/Mac-%E6%96%87%E4%BB%B6%E7%9A%84%E9%9A%90%E8%97%8F%E4%B8%8E%E6%98%BE%E7%A4%BA/</guid>
        
        <category>Mac</category>
        
        <category>终端</category>
        
        
      </item>
    
      <item>
        <title>Git 代码回滚</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;并不适合阅读的个人文档。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;git-revert-和-git-reset-的区别&quot;&gt;&lt;strong&gt;git revert&lt;/strong&gt; 和 &lt;strong&gt;git reset&lt;/strong&gt; 的区别&lt;/h1&gt;
&lt;p&gt;先看图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww3.sinaimg.cn/large/006tNbRwgy1fcr9tu6vdjj30t30ez0y8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sourceTree&lt;/strong&gt; 中 &lt;strong&gt;revert&lt;/strong&gt; 译为&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;提交回滚&lt;/code&gt;&lt;/strong&gt;，作用为忽略你指定的版本，然后提交一个新的版本。新的版本中已近删除了你所指定的版本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;reset&lt;/strong&gt; 为 &lt;strong&gt;重置到这次提交&lt;/strong&gt;，将内容重置到指定的版本。&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset&lt;/code&gt; 命令后面是需要加2种参数的：&lt;code class=&quot;highlighter-rouge&quot;&gt;–-hard&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;–-soft&lt;/code&gt;。这条命令默认情况下是 &lt;code class=&quot;highlighter-rouge&quot;&gt;-–soft&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;执行上述命令时，这该条commit号之 后（时间作为参考点）的所有commit的修改都会退回到git缓冲区中。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 命令可以在缓冲区中看到这些修改。而如果加上&lt;code class=&quot;highlighter-rouge&quot;&gt;-–hard&lt;/code&gt;参数，则缓冲区中不会存储这些修改，git会直接丢弃这部分内容。可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin HEAD --force&lt;/code&gt; 强制将分区内容推送到远程服务器。&lt;/p&gt;

&lt;h4 id=&quot;代码回退&quot;&gt;代码回退&lt;/h4&gt;

&lt;p&gt;默认参数 &lt;code class=&quot;highlighter-rouge&quot;&gt;-soft&lt;/code&gt;,所有commit的修改都会退回到git缓冲区
参数&lt;code class=&quot;highlighter-rouge&quot;&gt;--hard&lt;/code&gt;，所有commit的修改直接丢弃&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hard HEAD^ 		回退到上个版本
$ git reset --hard commit_id	退到/进到 指定commit_id 推送到远程	

$ git push origin HEAD --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;可以吃的后悔药-版本穿梭&quot;&gt;可以吃的后悔药-&amp;gt;版本穿梭&lt;/h4&gt;

&lt;p&gt;当你回滚之后，又后悔了，想恢复到新的版本怎么办？&lt;/p&gt;

&lt;p&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;git reflog&lt;/code&gt;打印你记录你的每一次操作记录&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reflog

输出：
c7edbfe HEAD@{0}: reset: moving to c7edbfefab1bdbef6cb60d2a7bb97aa80f022687
470e9c2 HEAD@{1}: reset: moving to 470e9c2
b45959e HEAD@{2}: revert: Revert &quot;add img&quot;
470e9c2 HEAD@{3}: reset: moving to 470e9c2
2c26183 HEAD@{4}: reset: moving to 2c26183
0f67bb7 HEAD@{5}: revert: Revert &quot;add img&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;找到你操作的id如：&lt;code class=&quot;highlighter-rouge&quot;&gt;b45959e&lt;/code&gt;，就可以回退到这个版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hard b45959e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Thu, 16 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/16/Git-%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/16/Git-%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A/</guid>
        
        <category>Mac</category>
        
        <category>终端</category>
        
        <category>Git</category>
        
        
      </item>
    
      <item>
        <title>Git指令整理</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;随便整理的一些自用的Git指令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;github创建仓库提示代码&quot;&gt;GitHub创建仓库提示代码&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;# 项目名&quot; &amp;gt;&amp;gt; README.md
git init
git add README.md
git commit -m &quot;first commit&quot;
git remote add origin git@github.com:qiubaiying/项目名.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;若仓库存在直接push&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add origin git@github.com:qiubaiying/test.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;常用操作&quot;&gt;常用操作&lt;/h1&gt;

&lt;h4 id=&quot;创建仓库初始化&quot;&gt;创建仓库（初始化）&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在当前指定目录下创建
git init

新建一个仓库目录
git init [project-name]

克隆一个远程项目
git clone [url]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;添加文件到缓存区&quot;&gt;添加文件到缓存区&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;添加所有变化的文件
 	git add .

添加名称指定文件
git add text.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;配置&quot;&gt;配置&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;设置提交代码时的用户信息
git config [--global] user.name &quot;[name]&quot;
git config [--global] user.email &quot;[email address]&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;提交&quot;&gt;提交&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;提交暂存区到仓库区
git commit -m &quot;msg&quot;

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;远程同步&quot;&gt;远程同步&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;分支&quot;&gt;分支&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;标签tags&quot;&gt;标签Tags&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;添加标签 在当前commit
git tag -a v1.0 -m 'xxx' 

添加标签 在指定commit
git tag v1.0 [commit]

查看
git tag

删除
git tag -d V1.0

删除远程tag
git push origin :refs/tags/[tagName]

推送
git push origin --tags

拉取
git fetch origin tag V1.0

新建一个分支，指向某个tag
git checkout -b [branch] [tag]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;查看信息&quot;&gt;查看信息&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat &quot;@{0 day ago}&quot;

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;撤销&quot;&gt;撤销&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;其他&quot;&gt;其他&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 生成一个可供发布的压缩包
$ git archives
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 15 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/15/Git%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/15/Git%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/</guid>
        
        <category>Mac</category>
        
        <category>终端</category>
        
        <category>Git</category>
        
        
      </item>
    
      <item>
        <title>Mac 快速调出终端</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;在Mac下快速调出终端的方法是：为终端添加一个快捷键打开方式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;为终端添加一个快捷键打开方式&quot;&gt;为终端添加一个快捷键打开方式&lt;/h2&gt;

&lt;p&gt;打开Mac下自带的软件 &lt;strong&gt;Automator&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww2.sinaimg.cn/large/006tKfTcgy1fckb184f74j319v0q01kx.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;新建文稿&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww1.sinaimg.cn/large/006tKfTcgy1fckb6zzo28j30mo0fvgn7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;创建一个服务&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww1.sinaimg.cn/large/006tKfTcgy1fckb93qmy5j30g00fh0vq.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww2.sinaimg.cn/large/006tKfTcgy1fckbfe8o0zj30t10lb0wv.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww1.sinaimg.cn/large/006tKfTcgy1fckbff4e7pj30t10lbwis.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改框内的脚本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;on run {input, parameters}
	tell application &quot;Terminal&quot;
		reopen
		activate
	end tell
end run

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行：&lt;code class=&quot;highlighter-rouge&quot;&gt;command + R&lt;/code&gt;，如果没有问题，则会打开终端&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww2.sinaimg.cn/large/006tKfTcgy1fckaqdd2m1j30t10lb42a.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww3.sinaimg.cn/large/006tKfTcgy1fckaq4nn9hj30iy0daaan.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;保存：&lt;code class=&quot;highlighter-rouge&quot;&gt;Command + S&lt;/code&gt;，将其命名为&lt;code class=&quot;highlighter-rouge&quot;&gt;打开终端&lt;/code&gt;或你想要的名字&lt;/p&gt;

&lt;p&gt;设置快捷键&lt;/p&gt;

&lt;p&gt;在 &lt;strong&gt;系统偏好设置&lt;/strong&gt; -&amp;gt; &lt;strong&gt;键盘设置&lt;/strong&gt; -&amp;gt; &lt;strong&gt;快捷键&lt;/strong&gt; -&amp;gt; &lt;strong&gt;服务&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;选择我们创建好的 ‘&lt;strong&gt;打开终端&lt;/strong&gt;‘，设置你想要的快捷键，比我我设置了&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘+空格&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww4.sinaimg.cn/large/006tKfTcgy1fckbvaixhnj30kw0ihq67.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到此，设置完成。&lt;/p&gt;

&lt;p&gt;聪明的你也许会发现，这个技巧能为所有的程序设置快捷启动。&lt;/p&gt;

&lt;p&gt;将脚本中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Terminal&lt;/code&gt; 替换成 其他程序就可以&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;on run {input, parameters}
    tell application &quot;Terminal&quot;
        reopen
        activate
    end tell
end run

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;黑技能&quot;&gt;黑技能&lt;/h2&gt;

&lt;p&gt;既然学了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Automator&lt;/code&gt; ，那就在附上一个黑技能吧。为你的代码排序。在 &lt;strong&gt;Xcode8&lt;/strong&gt;以前，有个插件能为代码快速排序，不过时过境迁~ 对于没用的插件而且又有患有强迫症的的小伙伴，只能手动排序了（😂）.&lt;/p&gt;

&lt;p&gt;首先还是创建一个服务&lt;/p&gt;

&lt;p&gt;创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Shell&lt;/code&gt;脚本，&lt;/p&gt;

&lt;p&gt;勾选:&lt;code class=&quot;highlighter-rouge&quot;&gt;用输出内容替换所选文本&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;输入：&lt;code class=&quot;highlighter-rouge&quot;&gt;sort|uniq&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;保存： 存为&lt;code class=&quot;highlighter-rouge&quot;&gt;Sort &amp;amp; Uniq&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww4.sinaimg.cn/large/006tKfTcgy1fckd40rgwmj30rt0ildiy.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;选中你的代代码&lt;/strong&gt; -&amp;gt; &lt;strong&gt;鼠标右键&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Servies&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Sort&amp;amp;Uniq&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww2.sinaimg.cn/large/006tKfTcgy1fckd6tx1dzj30h90b7mzm.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;排序后的代码：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww3.sinaimg.cn/large/006tKfTcgy1fckd6lak55j309j05y3yo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 06 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/06/Mac%E5%BF%AB%E9%80%9F%E8%B0%83%E5%87%BA%E7%BB%88%E7%AB%AF/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/06/Mac%E5%BF%AB%E9%80%9F%E8%B0%83%E5%87%BA%E7%BB%88%E7%AB%AF/</guid>
        
        <category>Mac</category>
        
        <category>效率</category>
        
        <category>开发技巧</category>
        
        
      </item>
    
      <item>
        <title>快速搭建个人博客</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;正所谓前人栽树，后人乘凉。&lt;/p&gt;

  &lt;p&gt;感谢&lt;a href=&quot;https://github.com/huxpro&quot;&gt;Huxpro&lt;/a&gt;提供的博客模板&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://qiubaiying.top&quot;&gt;我的的博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;从 Jekyll 到 GitHub Pages 中间踩了许多坑，终于把我的个人博客&lt;a href=&quot;http://qiubaiying.top&quot;&gt;BY Blog&lt;/a&gt;搭建出来了。。。&lt;/p&gt;

&lt;p&gt;本教程针对的是不懂技术又想搭建个人博客的小白，操作简单暴力且快速。当然懂技术那就更好了。&lt;/p&gt;

&lt;p&gt;看看看博客的主页样式：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://qiubaiying.github.io/&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-51a2fe6fbe24d1cd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在手机上的布局：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://qiubaiying.github.io/&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-d58bb45f9faedb70.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;废话不多说了，开始进入正文。&lt;/p&gt;

&lt;h1 id=&quot;快速开始&quot;&gt;快速开始&lt;/h1&gt;

&lt;h3 id=&quot;从注册一个github账号开始&quot;&gt;从注册一个Github账号开始&lt;/h3&gt;

&lt;p&gt;我采用的搭建博客的方式是使用 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;http://jekyll.com.cn/&quot;&gt;jekyll&lt;/a&gt; 的方式。&lt;/p&gt;

&lt;p&gt;要使用 GitHub Pages，首先你要注册一个&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;账号，GitHub 是全球最大的同性交友网站(吐槽下程序员~)，你值得拥有。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-e65e5cda50f38cef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;拉取我的博客模板&quot;&gt;拉取我的博客模板&lt;/h3&gt;

&lt;p&gt;注册完成后搜索 &lt;code class=&quot;highlighter-rouge&quot;&gt;qiubaiying.github.io&lt;/code&gt; 进入&lt;a href=&quot;https://github.com/qiubaiying/qiubaiying.github.io&quot;&gt;我的仓库&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-1b234fb8549e58aa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击右上角的 &lt;strong&gt;Fork&lt;/strong&gt; 将我的仓库拉倒你的账号下&lt;/p&gt;

&lt;p&gt;稍等一下，点击刷新，你会看到&lt;strong&gt;Fork&lt;/strong&gt;了成功的页面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-b2347768a1f2d993.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;修改仓库名&quot;&gt;修改仓库名&lt;/h3&gt;

&lt;p&gt;点击&lt;strong&gt;settings&lt;/strong&gt;进入设置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-f47b7e4802de6a34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p id=&quot;Rename&quot;&gt;&lt;/p&gt;
&lt;p&gt;修改仓库名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;你的Github账号名.github.io&lt;/code&gt;，然后 Rename&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-ca3d843e526cdd5b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这时你在在浏览器中输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;你的Github账号名.github.io&lt;/code&gt; 例如:&lt;code class=&quot;highlighter-rouge&quot;&gt;baiyingqiu.github.io&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;你将会看到如下界面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-96b5db55df9db422.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;说明已经成功一半了😀。。。当然，还需要修改博客的配置才能变成你的博客。&lt;/p&gt;

&lt;p&gt;若是出现&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-cfd55a22902a9d2c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;则需要 &lt;a href=&quot;#Rename&quot;&gt;检查一下你的仓库名是否正确&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;整个网站结构&quot;&gt;整个网站结构&lt;/h3&gt;

&lt;p&gt;修改Blog前我们来看看Jekyll 网站的基础结构，当然我们的网站比这个复杂。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── _config.yml
├── _drafts
|   ├── begin-with-the-crazy-ideas.textile
|   └── on-simplicity-in-technology.markdown
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile
|   └── 2009-04-26-barcamp-boston-4-roundup.textile
├── _data
|   └── members.yml
├── _site
├── img
└── index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;很复杂看不懂是不是，不要紧，你只要记住其中几个OK了&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; 全局配置文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt;	放置博客文章的文件夹&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt;	存放图片的文件夹&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他的想继续深究可以&lt;a href=&quot;http://jekyll.com.cn/docs/structure/&quot;&gt;看这里&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;修改博客配置&quot;&gt;修改博客配置&lt;/h3&gt;

&lt;p&gt;来到你的仓库，找到&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;文件,这是网站的全局配置文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-c23d4a5d67c88084.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击修改&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-b37268df7a7852ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;的内容&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-0c8750f5a18dbe03.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来我们来详细说说以下配置文件的内容：&lt;/p&gt;

&lt;h4 id=&quot;基础设置&quot;&gt;基础设置&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site settings
title: You Blog    				  	#你博客的标题
SEOTitle: 你的博客 | You Blog    	 #显示在浏览器上搜索的时候显示的标题
header-img: img/post-bg-rwd.jpg  	#显示在首页的背景图片
email: You@gmail.com	
description: &quot;You Blog&quot;  			 #网站介绍
keyword: &quot;BY, BY Blog, 柏荧的博客, qiubaiying, 邱柏荧, iOS, Apple, iPhone&quot; #关键词
url: &quot;https://qiubaiying.github.io&quot;          # 这个就是填写你的博客地址
baseurl: &quot;&quot;      # 这个我们不用填写

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;侧边栏&quot;&gt;侧边栏&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Sidebar settings
sidebar: true                           # 是否开启侧边栏.
sidebar-about-description: &quot;说点装逼的话。。。&quot;
sidebar-avatar:/img/avatar-by.JPG      # 你的个人头像 这里你可以改成我在img文件夹中的两张备用照片 img/avatar-m 或 avatar-g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;社交账号&quot;&gt;社交账号&lt;/h4&gt;
&lt;p&gt;展示你的其他社交平台&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-ec775a22f76e2f40.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在下面你的社交账号的用户名就可以了，若没有可不用填&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# SNS settings
RSS: false
weibo_username:     username
zhihu_username:     username
github_username:    username
facebook_username:  username
jianshu_username:	jianshu_id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;新加入了&lt;strong&gt;简书&lt;/strong&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;jianshu_id&lt;/code&gt; 在你打开你的简书主页后的地址如：&lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.jianshu.com/u/e71990ada2fd&lt;/code&gt;中，后面这一串数字：&lt;code class=&quot;highlighter-rouge&quot;&gt;e71990ada2fd &lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;评论系统&quot;&gt;评论系统&lt;/h4&gt;

&lt;p&gt;博客中使用的是 &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; 评论系统，在 &lt;a href=&quot;https://disqus.com/&quot;&gt;官网&lt;/a&gt; 注册帐号后，按下面的步骤简单的配置即可：&lt;/p&gt;

&lt;p&gt;进入 &lt;a href=&quot;https://disqus.com/home/settings/profile/&quot;&gt;设置页面&lt;/a&gt; 配置个人信息&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-904ecb30c536c73b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;配置 Disqus 个人信息&quot; /&gt;&lt;/p&gt;

&lt;p&gt;找到 &lt;strong&gt;Username&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-19d1b9e7d2624bfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Disqus Account&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个 &lt;strong&gt;Username&lt;/strong&gt;  就是我们 &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; 中 &lt;code class=&quot;highlighter-rouge&quot;&gt;disqus_username&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Disqus settings（https://disqus.com/）
disqus_username: qiubaiying
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;很对人反映 Disqus 评论插件加载不出来，因为 Disqus 在国内加载缓慢，所以我新集成了 Gitalk 评论插件（感谢&lt;a href=&quot;https://github.com/FeDemo&quot;&gt;@FeDemo&lt;/a&gt;的推荐），喜欢折腾的朋友可以看这篇：&lt;a href=&quot;http://qiubaiying.top/2017/12/19/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0-Gitalk-%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/&quot;&gt;《为博客添加 Gitalk 评论插件》&lt;/a&gt;。 我已经在&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; 配置就好了，只需要填写参数可以了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;网站统计&quot;&gt;网站统计&lt;/h4&gt;

&lt;p&gt;集成了 &lt;a href=&quot;http://tongji.baidu.com/web/welcome/login&quot;&gt;Baidu Analytics&lt;/a&gt; 和 &lt;a href=&quot;http://www.google.cn/analytics/&quot;&gt;Google Analytics&lt;/a&gt;，到各个网站注册拿到track_id替换下面的就可以了&lt;/p&gt;

&lt;p&gt;这是我的 Google Analytics&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-c36b895c53196fdb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不要使用我的track_id&lt;/strong&gt;😂。。。&lt;/p&gt;

&lt;p&gt;若不想启用统计，直接删除或注释掉就可以了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Analytics settings
# Baidu Analytics
ba_track_id: 83e259f69b37d02a4633a2b7d960139c

# Google Analytics
ga_track_id: 'UA-90855596-1'            # Format: UA-xxxxxx-xx
ga_domain: auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;好友&quot;&gt;好友&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;friends: [
    {
        title: &quot;简书·BY&quot;,
        href: &quot;http://www.jianshu.com/u/e71990ada2fd&quot;
    },{
        title: &quot;Apple&quot;,
        href: &quot;https://apple.com&quot;
    },{
        title: &quot;Apple Developer&quot;,
        href: &quot;https://developer.apple.com/&quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;保存&quot;&gt;保存&lt;/h4&gt;
&lt;p&gt;讲网页拉倒底部，点击 &lt;code class=&quot;highlighter-rouge&quot;&gt;Commit changes&lt;/code&gt; 提交保存&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-0781006b5d15d149.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次进入你的主页，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-a49ee2975d524c93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;恭喜你，你的个人博客搭建完成了😀。&lt;/p&gt;

&lt;h1 id=&quot;写文章&quot;&gt;写文章&lt;/h1&gt;

&lt;p&gt;利用 Github网站 ，我们可以不用学习&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;，就可以轻松管理自己的博客&lt;/p&gt;

&lt;p&gt;对于轻车熟路的程序猿来说，使用git管理会更加方便。。。&lt;/p&gt;

&lt;h2 id=&quot;创建&quot;&gt;创建&lt;/h2&gt;
&lt;p&gt;文章统一放在网站根目录下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; 的文件夹中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-fb74cdc11a950bd4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;创建一个文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-9a47b2074362e570.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在下面写文章，和标题，还能实时预览，最后提交保存就能看到自己的新文章了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-88acd9e29fa3ae8a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;格式&quot;&gt;格式&lt;/h2&gt;
&lt;p&gt;每一篇文章文件命名采用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;2017-02-04-Hello-2017.md&lt;/code&gt;时间+标题的形式，空格用&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;替换连接。&lt;/p&gt;

&lt;p&gt;文件的格式是 &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt; 的 &lt;a href=&quot;http://sspai.com/25137/&quot;&gt;&lt;strong&gt;MarkDown&lt;/strong&gt;&lt;/a&gt; 文件。&lt;/p&gt;

&lt;p&gt;我们的博客文章格式采用是 &lt;strong&gt;MarkDown&lt;/strong&gt;+ &lt;strong&gt;YAML&lt;/strong&gt; 的方式。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt&quot;&gt;&lt;strong&gt;YAML&lt;/strong&gt;&lt;/a&gt; 就是我们配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;_config&lt;/code&gt;文件用的语言。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sspai.com/25137/&quot;&gt;&lt;strong&gt;MarkDown&lt;/strong&gt;&lt;/a&gt; 是一种轻量级的「标记语言」，很简单。&lt;a href=&quot;http://sspai.com/25137&quot;&gt;花半个小时看一下&lt;/a&gt;就能熟练使用了&lt;/p&gt;

&lt;p&gt;大概就是这么一个结构。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout:     post   				    # 使用的布局（不需要改）
title:      My First Post 				# 标题 
subtitle:   Hello World, Hello Blog #副标题
date:       2017-02-06 				# 时间
author:     BY 						# 作者
header-img: img/post-bg-2015.jpg 	#这篇文章标题背景图片
catalog: true 						# 是否归档
tags:								#标签
    - 生活
---

## Hey
&amp;gt;这是我的第一篇博客。

进入你的博客主页，新的文章将会出现在你的主页上.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;按格式创建文章后，提交保存。进入你的博客主页，新的文章将会出现在你的主页上.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-f4d5bb65ae3abd00.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到这里，恭喜你！&lt;/p&gt;

&lt;p&gt;你已经成功搭建了自己的个人博客以及学会在博客上撰写文字的技能了（是不是有点小兴奋🙈）。&lt;/p&gt;

&lt;h4 id=&quot;首页标签&quot;&gt;首页标签&lt;/h4&gt;

&lt;p&gt;在首页可以看到这些特色标签，当你的文章出现相同标签（默认相同的&lt;strong&gt;标签数量大于1&lt;/strong&gt;），才会自动生成。&lt;/p&gt;

&lt;p&gt;所以当你只放一篇文章的时候是不会出现标签的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-9281b7176c456f92.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;建站的初期，博客比较少，若你想直接在首页生成比较多的标签。你可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;_congfig.yml&lt;/code&gt;中找到这段：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Featured Tags
featured-tags: true                     # 是否使用首页标签
featured-condition-size: 1              # 相同标签数量大于这个数，才会出现在首页
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将其修改为&lt;code class=&quot;highlighter-rouge&quot;&gt;featured-condition-size: 0&lt;/code&gt;, 这样只有一个标签时也会出现在首页了。&lt;/p&gt;

&lt;p&gt;相反，当你博客比较多，标签也很多时，这时你就需要改回 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; 甚至是 &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt; 了。&lt;/p&gt;

&lt;h1 id=&quot;自定义域名&quot;&gt;自定义域名&lt;/h1&gt;

&lt;p&gt;搭建好博客之后 你可能不想直接使用 &lt;a href=&quot;http://baiyingqiu.github.io&quot;&gt;baiyingqiu.github.io&lt;/a&gt; 这么长的博客域名吧, 想换成想 &lt;a href=&quot;http://qiubaiying.top&quot;&gt;qiubaiying.top&lt;/a&gt; 这样简短的域名。那我们开始吧！&lt;/p&gt;

&lt;h4 id=&quot;购买域名&quot;&gt;购买域名&lt;/h4&gt;
&lt;p&gt;首先，你必须购买一个自己的域名。&lt;/p&gt;

&lt;p&gt;我是在&lt;a href=&quot;https://wanwang.aliyun.com/domain/?spm=5176.8006371.1007.dnetcndomain.q1ys4x&quot;&gt;阿里云&lt;/a&gt;购买的域名&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-ef3844cab15e35ff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用&lt;strong&gt;阿里云&lt;/strong&gt; app也可以注册域名，域名的价格根据后缀的不同和域名的长度而分，比如我这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;qiubaiying.top&lt;/code&gt; 的域名第一年才只要4元~&lt;/p&gt;

&lt;p&gt;域名尽量选择短一点比较好记住，注意，不能选择中文域名，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;张三.top&lt;/code&gt; ,GitHub Pages &lt;strong&gt;无法处理中文域名&lt;/strong&gt;，会导致你的域名在你的主页上使用。&lt;/p&gt;

&lt;p&gt;注册的步骤就不在介绍了&lt;/p&gt;

&lt;h4 id=&quot;解析域名&quot;&gt;解析域名&lt;/h4&gt;

&lt;p&gt;注册好域名后，需要将域名解析到你的博客上&lt;/p&gt;

&lt;p&gt;管理控制台 → 域名与网站（万网） → 域名&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-9a75bba50d1b14d7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择你注册好的域名，点击解析&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-0968a8dd2045f4fd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加解析&lt;/p&gt;

&lt;p&gt;分别添加两个&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; 记录类型,&lt;/p&gt;

&lt;p&gt;一个主机记录为 &lt;code class=&quot;highlighter-rouge&quot;&gt;www&lt;/code&gt;,代表可以解析 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.qiubaiying.top&lt;/code&gt;的域名&lt;/p&gt;

&lt;p&gt;另一个为 &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;, 代表 &lt;code class=&quot;highlighter-rouge&quot;&gt;qiubaiying.top&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;记录值就是我们博客的IP地址，是 GitHub Pagas 在美国的服务器的地址 &lt;code class=&quot;highlighter-rouge&quot;&gt;151.101.100.133&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-0769a93bc487e9d8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以通过 &lt;a href=&quot;http://ip.chinaz.com/&quot;&gt;这个网站&lt;/a&gt;  或者直接在终端输入&lt;code class=&quot;highlighter-rouge&quot;&gt;ping 你的地址&lt;/code&gt;，查看博客的IP&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping qiubaiying.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;细心地你会发现所有人的博客都解析到 &lt;code class=&quot;highlighter-rouge&quot;&gt;151.101.100.133&lt;/code&gt; 这个IP。&lt;/p&gt;

&lt;p&gt;然后 GitHub Pages 再通过 CNAME记录 跳转到你的主页上。&lt;/p&gt;

&lt;h4 id=&quot;修改cname&quot;&gt;修改CNAME&lt;/h4&gt;

&lt;p&gt;最后一步，只需要修改 我们github仓库下的 &lt;strong&gt;CNAME&lt;/strong&gt; 文件。&lt;/p&gt;

&lt;p&gt;选择 &lt;strong&gt;CNAME&lt;/strong&gt; 文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-a422f3dab436dfb7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用的注册的域名进行替换,然后提交保存&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-6e613004fb410b44.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这时，输入你自己的域名，就可以解析到你的主页了。&lt;/p&gt;

&lt;p&gt;大功告成！&lt;/p&gt;

&lt;h1 id=&quot;进阶&quot;&gt;进阶&lt;/h1&gt;

&lt;p&gt;若你对博客模板进行修改，你就要看看 Jekyll 的&lt;a href=&quot;http://jekyll.com.cn&quot;&gt;开发文档&lt;/a&gt;,是中文文档哦，对英语一般的朋友简直是福利啊（比如说我😀）。&lt;/p&gt;

&lt;p&gt;还要学习 &lt;strong&gt;Git&lt;/strong&gt; 和 &lt;strong&gt;GitHub&lt;/strong&gt; 的工作机制了及使用。&lt;/p&gt;

&lt;p&gt;你可以先看看这个&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/&quot;&gt;git教程&lt;/a&gt;，对git有个初步的了解后，那么相信你就能将自己图片传到GitHub仓库上，或者可以说掌握了 &lt;strong&gt;使用git管理自己的GitHub仓库&lt;/strong&gt; 的技能呢。&lt;/p&gt;

&lt;p&gt;对于轻车熟路的程序猿来说，这篇教程就算就结束了，因为下面的内容对于你们来说 so eazy~&lt;/p&gt;

&lt;p&gt;但相信很多小白都一脸懵逼，那我们继续👇。&lt;/p&gt;

&lt;h1 id=&quot;利用githhub-desktop管理github仓库&quot;&gt;利用GithHub Desktop管理GitHub仓库&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://desktop.github.com/&quot;&gt;GithHub Desktop&lt;/a&gt; 是 &lt;strong&gt;GithHub&lt;/strong&gt; 推出的一款管理GitHub仓库的桌面软件，换句话说就是将你在&lt;strong&gt;Github&lt;/strong&gt;上的文件同步到本地电脑上，并将修改后的文件同步到&lt;strong&gt;Github&lt;/strong&gt;远程仓库。&lt;/p&gt;

&lt;h4 id=&quot;下载&quot;&gt;下载&lt;/h4&gt;

&lt;p&gt;点击图片进入下载页面，选择对应的平台进行下载&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://desktop.github.com/&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-6022ba3938b3088e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面以&lt;strong&gt;Mac&lt;/strong&gt;平台为例：&lt;/p&gt;

&lt;h4 id=&quot;安装&quot;&gt;安装&lt;/h4&gt;

&lt;p&gt;将下载好的文件解压，将这只小猫拖到应用程序文件夹中&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-8f8c27f4e5c72276.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就可以在&lt;strong&gt;Launchpad&lt;/strong&gt;找到这只小猫咪~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-0f2da4717361459c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;登录&quot;&gt;登录&lt;/h4&gt;

&lt;p&gt;点开应用,会弹出&lt;strong&gt;登录&lt;/strong&gt;框，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-adb7d6824e471ef5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;输入你的&lt;strong&gt;GitHub&lt;/strong&gt;账号和密码进行登录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-2d7c407ebddbb44f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;登录后关闭窗口&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-93cdccc42024914b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后返回引导窗，一直按 &lt;strong&gt;Continue&lt;/strong&gt; 继续&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-450ccef6b1ab7b0a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-06b6e6792472ecae.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还是&lt;strong&gt;Continue&lt;/strong&gt;~
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-681a6c455f6b512f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进入主界面，先 &lt;strong&gt;右键Remve&lt;/strong&gt; 删除这个用户指导，贼烦~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-604f6f23b8fab6f3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;克隆仓库&quot;&gt;克隆仓库&lt;/h4&gt;

&lt;p&gt;选择你的仓库克隆到本地&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-45ddcd27e2f858a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-625be1220fea36b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;管理仓库&quot;&gt;管理仓库&lt;/h4&gt;

&lt;p&gt;现在文件夹中打开&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-92c1616af56b501a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打开后你会的发现文件结构和你在Github上的一模一样~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-bf3580ae1cd9a29e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你最先关心的可能是你的头像~在&lt;strong&gt;img&lt;/strong&gt;文件夹中把替换我的头像就好了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-c9421d64538c3ba6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不仅是图片，所有在Github上的的操作都可以进行。&lt;/p&gt;

&lt;h4 id=&quot;保存修改&quot;&gt;保存修改&lt;/h4&gt;

&lt;p&gt;当你对仓库文件夹的文件下进行修改、添加或删除时，都可以在 &lt;strong&gt;GitHub Desktop&lt;/strong&gt; 中看到&lt;/p&gt;

&lt;p&gt;例如我在 &lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt; 中添加了一张图片 &lt;code class=&quot;highlighter-rouge&quot;&gt;avatar-demo.png&lt;/code&gt; 添加了一张图片&lt;/p&gt;

&lt;p&gt;就可以在看到&lt;strong&gt;GitHub Desktop&lt;/strong&gt;显示了我的修改&lt;/p&gt;

&lt;p&gt;保存修改只要按 &lt;strong&gt;Commit to master&lt;/strong&gt;，然后可以写上你的修改说明&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-4bfbfec37cbb8eb6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;同步&quot;&gt;同步&lt;/h4&gt;

&lt;p&gt;将修改同步到 &lt;strong&gt;GitHub&lt;/strong&gt; 远程仓库上只需要一步：点击右上角的&lt;strong&gt;同步按钮&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-3c2ee8234a7f1832.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;完成&quot;&gt;完成&lt;/h4&gt;

&lt;p&gt;打开你的GitHub上的仓库，你就可以看到已经和本地同步了&lt;/p&gt;

&lt;p&gt;可以看到你提交的详情： &lt;code class=&quot;highlighter-rouge&quot;&gt;add img&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-293bdd4cbee0e9e3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样，你已经能轻松管理自己的博客了。&lt;/p&gt;

&lt;p&gt;想上传头像，背景，或者是删掉你不要的图片（我的头像😏）已经是 so eazy了吧~&lt;/p&gt;

&lt;h4 id=&quot;注意&quot;&gt;注意&lt;/h4&gt;
&lt;p&gt;你在 &lt;strong&gt;GitHub&lt;/strong&gt; 网站上进行 &lt;strong&gt;Commit&lt;/strong&gt; 操作后，需要在&lt;strong&gt;GitHub Desktop&lt;/strong&gt;上按一下 &lt;strong&gt;同步按键&lt;/strong&gt; 才能同步网站上的修改到你的本地。&lt;/p&gt;

&lt;h1 id=&quot;修改个人介绍&quot;&gt;修改个人介绍&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fme0poz7gqj30vq0l8whh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改个人介绍需要修改根目录下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;about.html&lt;/code&gt; 文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fme0rna33tj30bw0bntah.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看不懂 HTML 标签？没关系，对照着修改就好了~ 还有注意这个有中英介绍&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fme0sbvmmcj30zp0os7ap.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;常见问题&quot;&gt;常见问题&lt;/h1&gt;

&lt;p&gt;最近有很多人给我提问题，我这边总结一下&lt;/p&gt;

&lt;h4 id=&quot;配置文件修改后没有效果&quot;&gt;配置文件修改后没有效果&lt;/h4&gt;
&lt;p&gt;刷新几遍浏览器就好了~&lt;/p&gt;

&lt;p&gt;不行的话，先清除浏览器缓存再试试。&lt;/p&gt;

&lt;h4 id=&quot;404错误&quot;&gt;404错误&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;检查你的仓库名是否有按照要求填写&lt;/li&gt;
  &lt;li&gt;确定 &lt;strong&gt;Fork&lt;/strong&gt; 的是不是我的仓库~&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;修改cname文件域名还是不变&quot;&gt;修改CNAME文件，域名还是不变&lt;/h4&gt;

&lt;p&gt;清除浏览器缓存就OK~&lt;/p&gt;

&lt;h4 id=&quot;其他问题&quot;&gt;其他问题&lt;/h4&gt;

&lt;p&gt;直接在评论中提出来或私信我，我会一一替大家解决的😀&lt;/p&gt;

&lt;h1 id=&quot;其他&quot;&gt;其他&lt;/h1&gt;

&lt;p&gt;最近有人往我的远程仓库不停的 &lt;strong&gt;push&lt;/strong&gt;，一天连收几十封邮件！例如像这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-1347f2cc9a4a8dc8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;原因大多是直接Clone了我的仓库到本地，&lt;strong&gt;没有删除我的远程仓库地址&lt;/strong&gt;，添加完自己的仓库地址后，一口气推送到所有远程仓库（包括我的😂）~&lt;/p&gt;

&lt;p&gt;打扰了我的工作和生活~&lt;/p&gt;

&lt;p&gt;所以，&lt;strong&gt;请不要往我的仓库上推送分支&lt;/strong&gt;！&lt;/p&gt;

&lt;p&gt;我发现一个问题是，很多人每次修改博客的内容都commit一次到远程仓库，然后再查看修改结果，这样效率非常低！&lt;/p&gt;

&lt;h4 id=&quot;来上车&quot;&gt;来，上车！&lt;/h4&gt;

&lt;h2 id=&quot;在本地调试博客&quot;&gt;在本地调试博客&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：下面的操作是在 &lt;strong&gt;Mac&lt;/strong&gt; 终端进行的。
&lt;strong&gt;Windows&lt;/strong&gt; 环境下的配置请参考 &lt;a href=&quot;http://www.jianshu.com/u/a13e7484dc21&quot;&gt;@梦幻之云&lt;/a&gt; 提供的 &lt;a href=&quot;https://agcaiyun.cn/2017/09/10/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有心的同学在 &lt;a href=&quot;http://jekyllcn.com/&quot;&gt;jekyll官网&lt;/a&gt; 就会发现 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; 的 提供的实例代码。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ gem install jekyll bundler
~ $ jekyll new my-awesome-site
~ $ cd my-awesome-site
~/my-awesome-site $ bundle install
~/my-awesome-site $ bundle exec jekyll serve
# =&amp;gt; 打开浏览器 http://localhost:4000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段命令创建了一个默认的 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekll&lt;/code&gt; 网站，然后在本机的 4000 窗口展示。聪明的你应该发现怎么做了吧~&lt;/p&gt;

&lt;p&gt;安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll bundler&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install jekyll
$ gem install jekyll bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;进入你的 &lt;strong&gt;Blog 所在目录&lt;/strong&gt;，然后创建本地服务器&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll s

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后会显示&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Auto-regeneration: enabled for '/Users/baiying/Blog'
Configuration file: /Users/baiying/Blog/_config.yml
    Server address: http://127.0.0.1:4000/
  Server running... press ctrl-c to stop.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你就可以在 &lt;a href=&quot;http://127.0.0.1:4000/&quot;&gt;http://127.0.0.1:4000/&lt;/a&gt; 看到你的博客，你对本地博客的修改都会在这个地址进行显示，这大大提高了对博客的配置效率。&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+c&lt;/code&gt;就可以停止 &lt;strong&gt;serve&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;star&quot;&gt;Star&lt;/h1&gt;

&lt;p&gt;若本教程顺利帮你搭建了自己的个人博客，请不要 &lt;strong&gt;害羞&lt;/strong&gt;，给我的 &lt;a href=&quot;https://github.com/qiubaiying/qiubaiying.github.io&quot;&gt;github仓库&lt;/a&gt; 点个 &lt;strong&gt;star&lt;/strong&gt; 吧！&lt;/p&gt;

&lt;p&gt;因为最近发现 Fork 将近破百，加上直接 Clone 仓库的，保守估计已经帮助上百人成功的搭建了自己的博客，&lt;del&gt;可是 Star 却仅仅只有 &lt;strong&gt;12&lt;/strong&gt;！可能还是做的不够好吧！&lt;/del&gt;现在已经破百了，感谢大家的Star！&lt;/p&gt;

&lt;h3 id=&quot;别无他求点个-star-吧&quot;&gt;&lt;strong&gt;别无他求，点个 &lt;a href=&quot;https://github.com/qiubaiying/qiubaiying.github.io&quot;&gt;Star&lt;/a&gt; 吧&lt;/strong&gt;！&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-768a38ee9fb0df28.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;心满意足！&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;补充&quot;&gt;补充&lt;/h1&gt;

&lt;h4 id=&quot;修改网站的-icon&quot;&gt;修改网站的 &lt;strong&gt;icon&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1flgh6k23ppj30ad00uq2t.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;要修改如图所示的网站 &lt;strong&gt;icon&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;在博客 &lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt; 目录下找到并替换 &lt;code class=&quot;highlighter-rouge&quot;&gt;favicon.ico&lt;/code&gt; 这个图标即可，图标尺寸为&lt;code class=&quot;highlighter-rouge&quot;&gt;32x32&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1flghahch1oj30gu09y419.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;修改主页的座右铭&quot;&gt;修改主页的座右铭&lt;/h4&gt;

&lt;p&gt;最近有不少小伙伴私信我：&lt;strong&gt;如何修改主页的座右铭？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;就是这个：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-31dc0068f256aca3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很简单，找到博客目录下的 &lt;strong&gt;index.html&lt;/strong&gt; 文件，修改这句话就可以了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-9e4785654523bf07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;如何在博客文章中上插入图片&quot;&gt;如何在博客文章中上插入图片&lt;/h4&gt;

&lt;p&gt;博客的文章用的是 MarkDown 格式，如果没用过 MarkDown 真的 强烈推荐 &lt;a href=&quot;http://sspai.com/25137&quot;&gt;花半个小时学习一下&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;MarkDown 中添加图片的形式是 :&lt;code class=&quot;highlighter-rouge&quot;&gt;![](图片的URL)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;![MarkDown示例图片](http://upload-images.jianshu.io/upload_images/2178672-eb2effd6b942a500.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)&lt;/code&gt;就会显示下面这张图片&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-98965f66db8f5856.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;MarkDown示例图片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://ws3.sinaimg.cn/large/006tNc79gy1fj9xhjzobbj30yg0my75z.jpg&lt;/code&gt;就是这张图片的URL，我们可以在浏览器输入这个URL找到或下载这张图片。&lt;/p&gt;

&lt;p&gt;所以，要在 MacDown 中插入图片，这张图片就需要上传到图床（网上），然后在引
用这张图片的URL。&lt;/p&gt;

&lt;h5 id=&quot;将图片上传到图床&quot;&gt;将图片上传到图床&lt;/h5&gt;

&lt;p&gt;Mac 上的图床神器：iPic&lt;/p&gt;

&lt;p&gt;直接在App Store上下载，谁用谁知道！&lt;/p&gt;

&lt;p&gt;使用方法很简单，直接拖动图片到 P 图标上，或者选中图片按快捷键 &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘+U&lt;/code&gt;，就能请示上传。&lt;/p&gt;

&lt;p&gt;上传成功就能直接粘贴图片的URL。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-7399aeaced6f1e29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;iPic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用 iPic 上传图片后，获取URL插入文章中就可以了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-4be76fb02708de5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;iPic上传图片&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;推荐几个好用软件&quot;&gt;推荐几个好用软件&lt;/h4&gt;

&lt;h5 id=&quot;markdown编辑器&quot;&gt;MarkDown编辑器&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://macdown.uranusjr.com/&quot;&gt;MacDown&lt;/a&gt;：可能是Mac上最好的MacDown编辑器了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-2226239a63278302.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;图片压缩工具&quot;&gt;图片压缩工具&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://imageoptim.com/&quot;&gt;ImageOptim&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;对于我们的博客来说，图片越大，加载速度越慢。&lt;/p&gt;

&lt;p&gt;不信你用手机打开你的博客试试~&lt;/p&gt;

&lt;p&gt;所以有必要对我们上传到博客网站中的图片：指的是你的头像，首页背景图片，文章背景图片等。对于博客文章中插入的图片，其实也可以压缩了再上传。&lt;/p&gt;

&lt;p&gt;对博客中的所有图片进行压缩：&lt;/p&gt;

&lt;p&gt;看看压缩结果，最高的一张压缩了78.7%，这简直是太可怕了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-0f8e643fa1da8674.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ImageOptim压缩图片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;好了，现在个人博客的加载速度估计要起飞了~&lt;/p&gt;

&lt;h1 id=&quot;最后要说个事情&quot;&gt;最后要说个事情&lt;/h1&gt;

&lt;p&gt;我在博客中的文章，你们可以保留，让更多需要帮助人的看到，当然也可以删除。&lt;/p&gt;

&lt;p&gt;但是，我发现居然有人把文章的作者改成了自己，然后当成自己的文章放在自己的博客上，这就令人感到气愤了。&lt;/p&gt;

&lt;p&gt;比如说向我请教问题的这位：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-ed45ebafec7f5d34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我在博客中的每篇文章都是我一字一句敲出来的，转载的文章我也注明了出处，表示对原作者的尊重。同时也希望大家都能尊重我的付出。&lt;/p&gt;

&lt;p&gt;谢谢~&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/06/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/06/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
        
        <category>Blog</category>
        
        
      </item>
    
  </channel>
</rss>
